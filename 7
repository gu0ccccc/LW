#!!================================================================
#  过 程 名： 	AsicTgAppSingleStreamSendAndRateGetForFilterThrou   
#  函数说明： 	对Tesgine端口进行控制，进行速率测试，SendPort端口发包，StaPort端口收包统计,SendPort按设定速率发送报文。
# 				StaPort端口配置Filter进行端口，Filter可选
#  参数说明：
#       1. -ExpectRec     (可选)预期接收端口的值，-1表示等于发送端口的值,暂时只支持PPS
#       2. -AllowError    (可选)允许发送和接收值的误差，默认为2
#       3. -StaJudgeExp   (可选)用来与返回的统计值进行匹配的正侧表达式，{[0-9]* 0 0},没有表示不匹配,只针对接收端
#       4. -MatchRMode    (可选)匹配的速率模式，kBPS或PPS，默认为KBPS
#
#要求：
#     	必须提供Tsu号,有前面占用：
#        
#
#  发送参数说明：
#		 1. -TsuID		(可选)TSU的ID，如果端口号以"x/y"形式传入，该参数值无效
#		 4. -Time		(可选)发送报文的时间，单位为秒 ,默认为60秒 #   
#		10. -SendPort	(必选)发送报文的端口号,从1开始,以“TsuId/端口号”形式表示时可不带TsuID,本参数优先，同时兼容“端口号”形式，端口号形式必须加TsuID参数 
#		11. -StaPort	(必选)接收报文的端口号,从1开始,以“TsuId/端口号”形式表示时可不带TsuID,本参数优先，同时兼容“端口号”形式，端口号形式必须加TsuID参数 
#
#
#  发送速率参数
#     3. -SendMode  (可选)端口报文发送模式：SINGLE_BURST：单次突发；  CONTINUE；连续发送。默认为CONTINUE。 
#           (可扩展实现) CONT_MULTI_BURST：连续多次突发；MULTI_BURST：多次突发；  TIMED_BURST：在一段时间内突发； 
#     4. -BurPacket  (可选)Burst发送的报文数量
#     5. -RateMode   (可选)端口速率模式：形式分别为百分比（Percentage），每秒多少包（PacketsPerSecond），每秒多少千bit（Kbps）；
#     6. -Speed      (可选)端口速率, 50%或1000形式表示；
#		在-Percentage后面的Speed表示的是设置速率是满速率的百分之多少，比如50%,则speed为50；
#		在-PacketsPerSecond后面的Speed表示的是该端口每秒发送的包数；  
#		在-Kbps后面的Speed表示的是该端口每秒发送的数据（包括CRC,前导字节以及数据之间的间隔也计算在内），以kbit为单位:
#
# 统计参数
#       3. -StatMode       (可选)统计模式，按流还是端口；PORT、STREAM
#		4. -StreamName     (必选)按流统计时，必须提供名，端口时为可选
#       5. -StaItem        (可选)统计项，默认为“PS_TX_STREAM_PACKETS  PS_RX_STREAM_PACKETS”
#
#Filter参数：
#       3. -TagNum:        (可选)报文的vlan tag数量，默认为1，最多支持二个tag
#       4. -ConMode:       (可选)是按固定字段配置还是按偏移配置，可选值为 FIX、OFFSET 
#
#******************************固定字段配置（FIX）参数 
#       5. -Field1         (可选)要匹配字段, 默认按单tagVlan匹配。
#								FIX模式现阶段只支持dmac、smac、topVlan、innerVlan、dip、sip、ethType、tos、dscp；802.1p需要跟vlan配套匹配 
#       6. -FieldM1        (可选)过滤字段的掩码,支持Mac（01-02-03-04-05-06），点分10进制表示的Ipv4地址（192.168.0.1），和16进制数据（不需输入0x）三种格式
#		7. -FieldV1        (可选)过滤字段匹配的值,同掩码配套 
# 
#******************************偏移配置（OFFSET）参数 
#       5. -Field1         (可选)要匹配字段的偏移位置。
#					 			OFFSET模式，直接指定起始偏移量
#       6. -FieldM1        (可选)过滤字段的掩码,支持Mac（01-02-03-04-05-06），点分10进制表示的Ipv4地址（192.168.0.1），和16进制数据（不需输入0x）三种格式
#		7. -FieldV1        (可选)过滤字段匹配的值,同掩码配套 
#	    8. -FieldL1 	   (可选)过滤字段的长度.应该与上面两个参数配套
#
#	报文构造参数	
#     20. -StreamSum    （必选）添加的流总数
#     21. -StreamPara   （必选）每条流的参数 以-StreamPara ｛｛流1参数｝｛流1参数｝｛流1参数｝｝形式出现，
#						具体参数有，见AsicTgPortPacketFormation。
#			   2. -StreamName     (必选)流名，以下为可选
#			   2. -RepeatCount    (可选)Stream的repeat count, 决定流的流量
#		       3. -ProType:       (可选)(可选)发送报文类型:包括ARP、IP、TCP、UDP、 PPPOE;如果不赋值，默认为普通的IP包
#		                          	    ARP      ARP协议类型
#		                          		IP       IP协议类型
#		                          	    TCP      TCP协议类型
#		                          		UDP      UDP协议类型
#										PPPOE    PPPOE协议报文 
#										CUSTOM   用户自定义报文
#			   4. -Vlan：         (可选)报文的外层VLAN ID，没有该选项表示不带vlan,功能同-PktArgs，范围1～4095	 	
#		       5. -SMac	 	    (可选，PPPOE必选)构造SmbPort报文的源mac,十六进制 0000.0000.0000。
#			   6. -DMac	 	    (可选，PPPOE必选)构造SmbPort报文的目的mac。 默认为广播
#			   7. -SIp		  	(可选)构造SmbPort报文的源ip,十进制的 192.168.1.1
#			   8. -DIp		  	(可选)构造SmbPort报文的目的ip 
#		       9. -InnerVlan     (可选)报文的内层VLAN ID，无该选项表示没有内层vlan。
#		       11. -EthType      (无用)报文ETH协议类型，缺省值0x0800,必须为十六进制
#		       12. -LenType      (可选)Stream的长度类型和相关值,Type MaxLen Step：Stream的长度类型和相关值；Type为STREAM_RANDOM/STREAM_STEP，分别表示Stream长度随机，长度跳变；MaxLen：Stream的最大长度；Step：Stream的长度类型为跳变的时候需要，表示Stream的长度跳变步长；
#		       14. -Length       (必选)指定的报文(流)长度。默认80
#		       16. -Pri          (可选)外层Vlan的优先级，范围0～7，缺省为0 功能同-PktArgs
#		       17. -Cfi          (可选)外层Vlan的配置字段，范围0～1，缺省为0 功能同-PktArgs 
#		       18. -InPri        (可选)内层Vlan的优先级，范围0～7，缺省为0 
#		       19. -InCfi        (可选)内层Vlan的配置字段，范围0～1，缺省为0 
#		       20. -PayLoad      (可选)填充值；CUSTOM时必选，-PayLoad  [UserDefineData]: 
#			   22. -PktArgs      (可选) 构造这种类型报文中的扩展参数，格式为-PktArgs {-vlan xxx}
#							   具体见参数后央附录：
#
#	
# 使用实例: 
#		set tsu [AsicTgPortEngross -TgIp 192.168.1.2 ]
#       AsicTgAppSingleStreamSendAndRateGetForFilter  -TsuID $tsu -SendPort 1 -StaPort 2 -StatMode port  -ExpectRec 1000 \
#		   -StreamSum 2 -StreamPara {{-StreamName G1 -Vlan 10 -InnerVlan 200 -InPri 6}} ]"
#
# AsicTgAppSingleStreamSendAndRateGetForFilter(-TsuID $tsuID -Time 5 -SendPort $staPort -StaPort $sendPort \
#    -StatMode port -SendMode SINGLE_BURST -BurPacket $packetNum -Speed 50 \
#    -TagNum 1 -ConMode FIX -Field1 topVlan -FieldM1 ffff -FieldV1 0064 \ 
#    -StreamSum 1 -StreamPara "{-StreamName G2 -Vlan $startVlan -SMac $Data(TgDmac) -DMac $Data(TgSmac)}") ;
#
#    -TagNum 1 -ConMode OFFSET -FieldL1 2 -Field1 4 -FieldM1 ffff -FieldV1 0010 \
#
#
# 返 回 值： 
#       成功返回:
#			0  -TsuID xx : 发送正常(0 -TsuID 1)	 
#				0  -TsuID 1	
#
#			Err001 : 加载license文件失败
#			Err002 : 添加TSU失败
#			Err003 : 添加DUT地址和端口地址失败
#			Err004 : 添加流失败
#			Err006 : 填充报文失败
#			Err007 : Tesgine连接失败
#			Err008 : 流报文修改失败
#           Err009 : 改变端口模式失败
#           Err011 : 设置流速率失败
#
# 作    者：余  剑(00110482)
# 生成日期：2009-12-3
# 修改记录：
#  
# 修改日期：
#!!===========================================================================    
proc AsicTgAppSingleStreamSendAndRateGetForFilterThrou  {args} {
   
    #设置进行比较的发送和接收的索引，可扩展成参数
    set sendIndex 	0
    set staIndex  	1
    
    set compIndex	0
  
    CommonArgsGet $args -ExpectRec eRec -AllowError aError -StaJudgeExp judgeExp  -StaPort statPort -StaItem statItem \
    					-TsuID tsu -MatchRMode rMode -StreamPara sPara ;
	
	if {![info exists eRec] || ([info exists eRec] && [string match $eRec "{}"] )} {
	 	set eRec "-1"
	} 
	if {![info exists aError] || ([info exists aError] && [string match $aError "{}"] )} {
	 	set aError 0
	}
	if {![info exists statItem] || ([info exists statItem] && [string match $statItem "{}"] )} {
	 	set args [CommonArgsSet $args -StaItem "PS_TX_PPS PS_RX_PPS PS_TX_STREAM_PACKETS  PS_RX_STREAM_PACKETS P_RX_FILTER_PACKETS" ]
	}
    if {![info exists rMode] || ([info exists rMode] && [string match $rMode "{}"] )} {
	 	set rMode "KBPS"
    }
    
    set ret1 {}
    
    set filterArgs [CommonArgsSet $args -Port $statPort ]
    
    # 在统计端口设置过滤模板，如果没有参数，则设为全部不匹配，这时，所有报文将会被统计
    set retFilt [eval AsicTgPortFilterConfig $filterArgs] 
    if {"0" != $retFilt } {
		::TestLib::ShowTraceMessage -level 10 -color RED -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),设置过滤失败，返回信息为： $retFilt"
	    return $retFilt
    }
    
    # 控制Tesgine进行发送报文
    set retVal [eval AsicTgSingleStreamSendAndRateGet $args]
   
    # 打印报文 
    AsicTgPortFilterPkLoad -TsuID $tsu -Port $statPort
    
    # 在统计端口恢复过滤模板
    set retFilt [eval AsicTgPortFilterConfigResume $filterArgs] 
    if {"0" != $retFilt } {
		::TestLib::ShowTraceMessage -level 10 -color RED -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),恢复过滤失败，返回信息为： $retFilt"
	    return $retFilt
    }
    
    # 取返回值，并进行处理 
    if { "0" == [lsearch $retVal "0" ] } {
    	        
        # 处理测试仪器返回值
        CommonArgsGet $retVal  -ReturnRet  returnRet
		set	retVal [lindex $returnRet $compIndex ]
		
        # 从返回值中取出接收、发送的值,统计项0.1相对应；
        CommonArgsGet $retVal  -SendTra  sendV  -RecTra recV
	    
		set sendF    [lindex $sendV $sendIndex]
		set recF     [lindex $recV  $staIndex]
		
        ::TestLib::ShowTraceMessage -level 10 -color blue -msg  "(AsicTgAppSingleStreamSendAndRateGetForFilter),发送帧数为 $sendF,其中接收到的帧数为 $recF !"
	
		if {"0" == $recF } {
			::TestLib::ShowTraceMessage -level 10 -color RED -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),接收的统计值为 $recF，请检查!"
		    return Err010
		
		} elseif {[info exists judgeExp]} {			
		 	set judgeRe [regexp $judgeExp $recV ]		
			
			if {1 != [string equal "1" $judgeRe]} {
				lappend  ret1 "Err050" 
				::TestLib::ShowTraceMessage -level 10 -color RED -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter)表达式：$judgeExp 与返回值不匹配：$recV"
			} 
			
			::TestLib::ShowTraceMessage -level 10 -color blue -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter)表达式：$judgeExp 与返回值匹配：$recV"
		}
		
		# 进行Kpbs的速率换算
		set rMode [string toupper $rMode]
		if { 1 == [string equal "KBPS" $rMode ] } {
			
			# 取流中报文长度进行换算
		    for {set ss  0} { $ss <= 0 } { incr ss } {
				set streamPara [lindex $sPara $ss]		
				CommonArgsGet $streamPara -Length pktLen
		    } ; # end for
		    
		    if {![info exists pktLen] || ([info exists pktLen] && [string match $pktLen "{}"] )} {
		 		set pktLen 80
		    }
		    
			set recF [expr ($recF * [expr $pktLen + 4 + 20  ] * 8) / 1000 ]
			
		} else {
		    set recRate $recF
		    
		}
		
		# 进行速率比较
		if {"-1" == $eRec} {
			if { [expr abs([expr $sendF - $recF ]) ] > $aError }   { 			
				::TestLib::ShowTraceMessage -level 10 -color RED -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),发送统计值 $sendF $rMode 与接收的统计值 $recF $rMode 不一致，误差[expr abs([expr $sendF - $recF ]) ] > $aError,请检查!"
				lappend ret1 Err101
				 
			} else {
				::TestLib::ShowTraceMessage -level 10 -color blue -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),发送统计值 $sendF $rMode 接收的统计值 $recF $rMode ，误差[expr abs([expr $sendF - $recF ]) ]  < $aError"
			}
			
		} else {
			if { [expr $recF - $eRec ] > $aError }   {		
				::TestLib::ShowTraceMessage -level 10 -color RED -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),预期接收值 $eRec $rMode 与实际接收的统计值 $recF $rMode 不一致,误差[expr abs([expr $eRec - $recF ]) ]> $aError，请检查!"
				lappend ret1 Err101
				 
			} else {
				::TestLib::ShowTraceMessage -level 10 -color blue -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),预期接收值 $eRec $rMode 实际接收的统计值 $recF $rMode ,发送没有丢失数据包 !"
			}
		}
		
    } else {
    	::TestLib::ShowTraceMessage -level 10 -color RED -msg "(AsicTgAppSingleStreamSendAndRateGetForFilter),调用Tesgine函数失败，返回值为 $retVal"
    	return $retVal
    	
    }
	
	#20、返回值：
	if {1 == [string equal $ret1 {}]} {
		return "0 Suc001"
		
	} else {
		return $ret1
		
	}
	
} ; #end proc
#=======================================================
#----------------- 测 试 记 录 -------------------------
#=======================================================  

