Flush性能测试.app.tcl

namespace eval TestApp {

    proc TestLogic { args } {
		
        
        # 环境信息清理动作
        AsicEnvironmentInfoInitialization
        
        #===================================================================================
        #  系统变量，测试人员不可更改
        #===================================================================================
        # 取得当前过程名
        set sProcName [::TestLib::GetProcedureName -complete]
        # 向窗口打印提示信息
        set strCmd "========Begin:$aTestCaseData(testCaseNo)=========\033\033"
		::Common::CSend $term1 -r strRet -s [list "#"] -t 10000 "$strCmd"
				
		#获取测试数据，重新封装到数组Data里去
        CommonArgsToArray $aTestCaseData(args) Data
        #当前目录下执行的测试逻辑文件
        set strFileName [string map {app.tcl txt} $::TestLib::naLibData(testLogicFileName)]
      	#使用parseLogicFile执行测试逻辑
        set res [parseLogicFile $strFileName]
	
	    #　收集环境信息
		AsicEnvironmentInfoCollect $res	
	
        #显示执行结果
        ShowTraceMessage -level 10 -msg "result = $res"
        #返回执行结果
        return $res
        
    }
    #===================================================================================
    # 系统函数调用，测试人员不可更改
    #   测试逻辑执行入口
    #===================================================================================
    #!!================================================================
    #过 程 名：    Main
    #程 序 包：
    #功能类别：
    #过程描述：    （包含范例）
    #   载入package TestLib
    #   执行测试逻辑
    #参数说明：
    #返 回 值：
    #   0:  执行成功
    #   1:  执行失败
    #函数作者：    Peixing.Lin.(14507)
    #生成日期：    2003-03-04 20:04:06
    #修改纪录：
    #!!================================================================
    proc Main {} {
        global auto_path
        
        # 默认执行成功
        set result 0
        if {([lsearch -exact [namespace children ::] ::TestLib] != -1)} {
            # 如果TestLib已经载入，则退出；
            return $result
        }
        set sTestLibDir             "Lib/CommonLib"
        set sScriptsDir             "Scripts"
        set sTestLogicFilePathName  ""
        set sAutoTestPath           ""
        set sTestLibPath            ""
        # 得到带绝对路径的测试逻辑文件名
        set sTestLogicFilePathName  [info script]
        if { $sTestLogicFilePathName == "" } {
            set sTestLogicFilePathName  [tgetcurfilepath]
        }

        set lPath   [file split $sTestLogicFilePathName]
        # 得到Scripts目录名在测试逻辑路径列表中的索引
        set iIdx -1
        for { set i 0 } { $i < [llength $lPath] } { incr i} {
            # 不区分大小写
            if { [string equal -nocase $sScriptsDir [lindex $lPath $i]] != 1} {
                continue
            }
            set iIdx $i
            break
        }
        
        #set iIdx    [lsearch -exact $lPath $sScriptsDir]
        if {  -1 == $iIdx } {
            puts "TestApp-测试逻辑脚本没有按照目录结构的定义放在规定的位置Scripts目录下!"
            set result 1
            return $result
        } else {
            #取得自动化工作目录
            set sAutoTestPath [lindex $lPath 0]
            for {set i 1} {$i < $iIdx} {incr i} {
                set sAutoTestPath [file join $sAutoTestPath [lindex $lPath $i]]
            }
        }

        # 得到package TestLib函数库所在的路径
        set sTestLibPath [file join $sAutoTestPath $sTestLibDir]

        # 将自动化体系的函数库的路径加入tcl系统函数库路径变量中
        lappend auto_path $sTestLibPath
        # 如果没有包索引文件，则创建
        if { ![file exists [file join $sTestLibPath "pkgIndex.tcl"]] } {
            if {[catch [list pkg_mkIndex $sTestLibPath *.tcl] errMsg]} {
                puts "TestApp: 创建运行引索引失败！"
                puts "TestApp: 失败信息：$errMsg"
                set result 1
                return $result
            }
        }
        # 载入package TestLib
        set status [ catch { package require TestLib } pkgVersion ]
        if { $status != 0 } {
            puts "TestApp: 无法找到TestLib的路径；\n$::auto_path\n错误信息: $pkgVersion\n"
            set result 1
            return $result
        } else {
            puts "TestApp: 载入测试包TestLib,版本号：$pkgVersion"
        }
        
        # 调用支撑代码接口，执行测试逻辑
        set result [::TestLib::RunEngine    ::TestApp::TestLogic     $sTestLogicFilePathName]
        
        # 进行用例执行后的信息收集
        
        return $result
    }
}

# 测试逻辑执行入口点
::TestApp::Main
#--<end>--


Flush性能测试.cfg
[TestLogicInfo]
testClusterNames= IasGlobal/AsicGponTc
productLib=
toolLib=

# 在TERM1控制台窗口上的建立/恢复配置命令/脚本 
TERM1,SetupCommands=
TERM1,RestoreCommands=
TERM1,SetupScripts= 
[TestCaseData]
FIELDS,      testCaseNo,        testClusters,      testCaseName,    testCaseLevel,		args,      
1, GPON_DBA_Flush_030,  IasGlobal/AsicGponTc, Flush性能测试_最小时延模式,  $chipVersion$execNetWork4$caseLevel1, \
  
  -DBAAsType min-loop-delay  -ontponid 0  -SendPkNum 10000  -sendPRate 60 \
   -pLength 1514 -addr 0x14200010 -data0 0 -time2 2 , 
   
Flush性能测试.txt
逻辑编号:GPON_DBA_Flush_030	
逻辑名称:Flush性能测试	
逻辑说明:Flush性能测试	
组网编号：         
预置条件: 
测试步骤:


010.确认ONT:
   	IasOntAdd(-TermName $oltTerm -FrameSlot $gponOltFrameSlot -Port $gponOltPort -Sn $gponOltOntSN -OntId $gponOltOntId -OntWay $gponOntAddWay -OntlineProfileId $gponLineProfileId -OntSrvProfileId $gponSrvProfileId ); 
  	IasCommonDelay(-Time $time); 

030.增加service——port:
    IasVlanServPortAdd(-TermName $oltTerm -Index $oltSrvIndex -StartVlan $tgLMNetPMainVlan -ServiceType gpon -FrameSlotPort $gponOltFSPort -OntId $gponOltOntId \
     -GemPortId $gponOltGemIndex -MultiService user-vlan -UserVlan $oltCVlan -RxCttr $rxCttr -TxCttr $txCttr);   

040.判断ONT的状态: 
    GponOntCtrolFlagCheck(-TermName $oltTerm -FrameSlot $gponOltFrameSlot -Port $gponOltPort -OntId $gponOltOntId -CmpList {-Controlflag active -Runstate online -Configstate normal});   

050. 单向引流，mac地址学习，下行: 
	AsicTgSingleStreamSendAndStat(-Time $Data(time2) -sendPort $tgLinkMainNetPort -staPort $tgLinkMainUserPort  -StatMode port \
    -Time 2 -SendMode SINGLE_BURST -BurPacket $Data(SendPkNum) -Speed $Data(sendPRate) \
    -StreamSum 1 -StreamPara "{-StreamName DnStream -Vlan $tgLMNetPMainVlan -SMac $tgLMNetPSmac -DMac $tgLMUserPSmac }" )  ;

070.用tesgine上行发包,判断是否正常: 
	AsicTgAppSingleStreamSendAndStaCompare(-sendPort $tgLinkMainUserPort -staPort $tgLinkMainNetPort -StatMode PORT  \
	-MatchRMode PPS -StaItem "PS_TX_STREAM_PACKETS  PS_RX_STREAM_PACKETS  P_RX_FCS_ERRORS" -StaJudgeExp {[0-9]*\s*[0-9]*\s*[0-9]*}  \
	-Time $tgSendTime -SendMode SINGLE_BURST -BurPacket $Data(SendPkNum) -AllowError 5 -RateMode Percentage -Speed $Data(sendPRate) \
	-StreamSum 1 -StreamPara "{-StreamName UpStream -Vlan $tgLMUserPMainVlan -Length $Data(pLength) -SMac $tgLMUserPSmac -DMac $tgLMNetPSmac }") ;	

080.删除tcont:
	HicliGponUpTcontSet (-TermName $ontTerm -ui_tcont $gponOltTcontId -em_valid 0);
	
090.查看相应寄存器flush的值:
    AsicSupportAsicChipExtPhymwGet (-TermName $ontTerm -OntType $ontType -Addr $Data(addr) -Cmplist "-Data0 0000fffe");

095.清除队列统计:
    QosQueueCntAllClr(-TermName $ontTerm);

100. 单向引流，mac地址学习，下行: 
	AsicTgSingleStreamSendAndStat(-Time $Data(time2) -sendPort $tgLinkMainNetPort -staPort $tgLinkMainUserPort  -StatMode port \
    -Time 2 -SendMode SINGLE_BURST -BurPacket $Data(SendPkNum) -Speed $Data(sendPRate) \
    -StreamSum 1 -StreamPara "{-StreamName DnStream -Vlan $tgLMNetPMainVlan -SMac $tgLMNetPSmac -DMac $tgLMUserPSmac }" )  ;
 
110.用tesgine上行发包,判断是否正常(上行断流): 
	AsicTgAppSingleStreamSendAndStaCompare(-sendPort $tgLinkMainUserPort -staPort $tgLinkMainNetPort -StatMode PORT  \
	-MatchRMode PPS -StaItem "PS_TX_STREAM_PACKETS  PS_RX_STREAM_PACKETS  P_RX_FCS_ERRORS" -StaJudgeExp {[0-9]*\s*[0-9]*\s*[0-9]*}  \
	-Time $tgSendTime -RateMode Percentage -Speed 100 -StreamSum 1 \
	-StreamPara "{-StreamName UpStream -Vlan $tgLMUserPMainVlan -Length $Data(pLength) -SMac $tgLMUserPSmac -DMac $tgLMNetPSmac }")=Err010;	

110.查看相应队列(应该没有tcont1对应的队列统计):
    AsicSupportAsicQosQueueCntGet (-TermName $ontTerm -OntType $ontType -Cmplist "-QID 25")=Err020;    
    AsicSupportAsicQosQueueCntGet (-TermName $ontTerm -OntType $ontType -Cmplist "-QID 31")=Err020;    

                        
资源释放： 

100.延迟一段时间:  
	IasCommonDelay(-Time 2);
	
110.删除业务流,便于删除ONT:
    IasVlanServPortDelete(-TermName $oltTerm -DeleteType vlan -StartVlan $tgLMNetPMainVlan -ServiceType gpon  -FrameSlotPort $gponOltFSPort);

120.删除端口下的所有ONT: 
    IasOntDel(-TermName $oltTerm -FrameSlot $gponOltFrameSlot -Port $gponOltPort);
